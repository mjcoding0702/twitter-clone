`Twitter API V1`
let express = require('express');
let path = require('path');
const cors = require('cors');
const { Pool } = require('pg');
const { DATABASE_URL } = process.env;
const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');
require('dotenv').config();

let app = express()
app.use(cors());
app.use(express.json());

const pool = new Pool({
  connectionString: DATABASE_URL,
  ssl: {
    rejectUnauthorized: false,
  }
});

async function getPostgresVersion() {
  const client = await pool.connect();
  try {
    const res = await client.query('SELECT version()');
    console.log(res.rows[0]);
  } finally {
    client.release();
  }
}

getPostgresVersion();


//Handle follow endpoint
app.post('/follow', async (req,res) => {
  const client = await pool.connect();
  const {follower_id, followed_id} = req.body

  try {
    const checkFollow = await client.query('SELECT * FROM follow WHERE follower_id = $1 AND followed_id = $2', [follower_id,followed_id])

    if (checkFollow.rows.length === 0){
      const result = await client.query('INSERT INTO follow (follower_id,followed_id) VALUES ($1,$2) RETURNING *', [follower_id,followed_id]);
      res.json({message: "Followed successfully", result})
    } else {
      res.status(400).json({message: "You're already following this person."})
    }
    
  } catch(error) {
    console.error(error.stack)
    res.status(500).json({message: "Something went wrong."})
  } finally {
    client.release();
  }
})


//Handle unfollow endpoint
app.delete('/unfollow', async (req,res) => {
  const client = await pool.connect();
  const {follower_id, followed_id} = req.body
  try {
    const checkResult = await client.query('SELECT * FROM follow WHERE follower_id = $1 AND followed_id = $2', [follower_id, followed_id])

    if (checkResult.rows.length > 0) {
      //run query
      const result = await client.query('DELETE FROM follow WHERE follower_id = $1 AND followed_id = $2 RETURNING *', [follower_id, followed_id])
      res.json({message: "Unfollowed successfully."})
      console.log(result)
    } else {
      res.status(400).json({message: "You are not following this person."})
    } 
    }catch(error) {
      console.error(error);
    } finally {
      client.release();
    }
})


//Get all users's data
app.get('/getuser', async (req,res) => {
  const client = await pool.connect();

  try {
    const result = await client.query('SELECT * FROM users');
    res.json(result.rows);
  } catch (error) {
    console.error(error.stack)
    res.status(500).json({message: "Something went wrong."})
  } finally {
    client.release();
  }
})

//Get all posts
app.get('/posts/user/:user_id', async (req,res) => {
  const {user_id} = req.params;
  const client = await pool.connect();

  try {
    const posts = await client.query('SELECT * FROM posts WHERE user_id = $1',[user_id]);
    if (posts.rowCount > 0){
      res.json(posts.rows);
    } else {
      res.status(404).json({error: "No posts found for this user."});
    }
  } catch (error){
    console.error('Error', error.message);
    res.status(500).json({error: error.message});
  } finally {
    client.release();
  }
})

// Add post endpoint
app.post('/posts', async (req, res) => {
  const { title, content, user_id } = req.body;
  const client = await pool.connect();
  try {
    //Check if user exists
    const userExists = await client.query('SELECT id FROM users WHERE id = $1', [user_id]);
    if (userExists.rows.length > 0) {
      //User exists, add post
      const post = await client.query('INSERT INTO posts (title, content, user_id, created_at) VALUES ($1,$2,$3, CURRENT_TIMESTAMP) RETURNING *', [title, content, user_id]);
      // Send new post data back to client
      res.json(post.rows[0]);
    } else {
      // User does not exist
      res.status(400).json({ error: "User does not exist" });
    }
  } catch (err) {
    console.log(err.stack);
    res.status(500).json({ error: "Something went wrong. please try again later!" });
  } finally {
    client.release();
  }
})

// Add likes to post endpoint
app.post('/likes', async (req, res) => {
  const {user_id, post_id}= req.body;
  const client = await pool.connect();

  try {
    //check if an inactive like for this user and post already exists
    const prevLike = await client.query(`SELECT * FROM likes WHERE user_id = $1 AND post_id = $2 AND active = false`, [user_id, post_id]);

    if (prevLike.rowCount > 0){
      //if the inactive like exists, update it to active
      const newLike = await client.query(`
        UPDATE likes
        SET active = true
        WHERE id = $1
        RETURNING *
      `,[prevLike.rows[0].id])
     res.json(newLike.rows[0])
    } else {
    // if it does not exist, insert new like row with active as true
    const newLike = await client.query(`
      INSERT INTO likes (user_id, post_id, created_at, active)
      VALUES ($1, $2, CURRENT_TIMESTAMP, true)
      RETURNING *
    `, [user_id, post_id]);
    res.json(newLike.rows[0])
  }
  } catch (error) {
    console.error('Error', error.message)
    res.status(500).json({error: error.message});
  } finally {
    client.release();
  }
})

// Deactivate a like 
app.put('/likes/:id', async (req,res) => {
  const {id} = req.params;
  const client = await pool.connect();

  try {
    await client.query(`
      UPDATE likes
      SET active = false
      WHERE id = $1
    `, [id]);
    res.json({message: "The like has been made inactive successfully!"})
  } catch(error){
    console.error('Error', error.message);
    res.status(500).json({error: error.message})
  } finally {
    client.release();
  }
})


// Delete like from a post
app.delete('/likes/:id', async (req, res) => {
  const { id } = req.params;

  const client = await pool.connect();

  try {
    await client.query('DELETE FROM likes WHERE id  = $1 RETURNING ID', [id]);
    res.json({ message: "Like Deleted Successfully" });
  } catch (err) {
    console.log(err.stack);
    res.status(500).send('An error occurred, please try again');
  } finally {
    client.release();
  }
})


app.delete('/likes', async (req,res) => {
  const client = await pool.connect();
  const {user_id, post_id} = req.body;

  try {
    const deleteLike = await client.query('DELETE FROM likes WHERE user_id = $1 AND post_id = $2', [user_id, post_id]);

    if (deleteLike.rowCount > 0){
      res.json({hasLiked: false})
    } else {
      res.json({hasLiked: true})
    }
  } catch (error) {
    console.error(`Error unliking post: ${error}`)
    res.status(500).json({error: 'Failed to unlike post'})
  } finally {
    client.release();
  }
})




// Fetch usernames who like a specific post
app.get('/likes/post/:post_id', async (req, res) => {
  const { post_id } = req.params;
  const client = await pool.connect();

  try {
    const likes = await client.query(`
      SELECT users.username,users.id AS user_id, likes.id AS likes_id
      FROM likes
      INNER JOIN users ON likes.user_id = users.id
      WHERE likes.post_id = $1
    `,[post_id])
    res.json(likes.rows)

  } catch (err) {
    console.log(err.stack);
    res.status(500).send('An error occurred, please try again');
  } finally {
    client.release();
  }
})

//Fetch a post endpoint
app.get('/posts/:id', async (req, res) => {
  const { id } = req.params;
  const client = await pool.connect();

  try {
    const requestedPost = await client.query('SELECT * FROM posts WHERE id = $1', [id]);
    if (requestedPost) {
      await client.query('UPDATE posts SET views = views + 1 WHERE id = $1', [id])
      res.json(requestedPost.rows);
    }
  } catch (error) {
    console.log(error.stack);
    res.status(500).json({ error: "Something went wrong. please try again!" })
  } finally {
    client.release();
  }
})

//-----------------------------COMMENTS SECTION---------------------------------
// Add comment endpoint
app.post('/comments', async (req, res) => {
  const client = await pool.connect();
  const { content, user_id, post_id } = req.body;
  try {
    const query = 'INSERT INTO comments (content, user_id, post_id) VALUES ($1,$2,$3) RETURNING *';
    const params = [content, user_id, post_id];
    const result = await client.query(query, params);
    res.json(result.rows);
  } catch (error) {
    console.log(error.stack);
    res.status(500).send('An error occurred. Please try again.');
  } finally {
    client.release();
  }
})

// Delete comment endpoint
app.delete('/comments/:comment_id', async (req, res) => {
  const client = await pool.connect();
  try {
    const { comment_id } = req.params;
    const result = await client.query('DELETE FROM comments WHERE comment_id = $1 RETURNING *', [comment_id]);
    res.json(result.rows);
  } catch (error) {
    console.log(error.stack);
    res.status(500).send('An error occurred. Please try again.');
  } finally {
    client.release();
  }
})

// Edit comment endpoint
app.post('/comments/:comment_id', async (req, res) => {
  const client = await pool.connect();
  try {
    const { comment_id } = req.params;
    const { content } = req.body
    await client.query('UPDATE comments SET content = $1 WHERE id = $2', [content, comment_id]);
    res.json({ message: "comment updated successfully" })
  } catch (error) {
    console.log(error.stack);
    res.status(500).send('An error occurred. Please try again.');
  } finally {
    client.release();
  }
});


// Get comment endpoint
app.get('/comments/:comment_id', async (req, res) => {
  const client = await pool.connect();
  try {
    const { comment_id } = req.params;
    const result = await client.query('SELECT * FROM comments WHERE id = $1', [comment_id]);
    res.json(result.rows)
  } catch (error) {
    console.log(error.stack);
    res.status(500).send('An error occurred. Please try again.');
  } finally {
    client.release();
  }
})


// Like comment endpoint
app.post('/likes/comments', async (req, res) => {
  const client = await pool.connect();
  try {
    const { user_id, post_id, comment_id } = req.body
    const query = 'INSERT INTO likes (user_id,post_id,comment_id) VALUES ($1,$2,$3) RETURNING *';
    const params = [user_id, post_id, comment_id];
    const result = await client.query(query, params);
    res.json(result.rows)
  } catch (error) {
    if (error.code === '23505') { // Unique violation error
      res.status(400).send('You have already liked this comment.');
    } else {
      console.log(error.stack);
      res.status(500).send('An error occurred. Please try again.');
    }
  } finally {
    client.release();
  }
})


app.get('/', (req, res) => {
  res.status(200).json({ message: "Welcome to the twitter API!" });
});

app.listen(3000, () => {
  console.log('App is listening on port 3000');
})
